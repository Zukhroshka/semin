{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5f0fe947",
   "metadata": {},
   "source": [
    "28\n",
    "а) Возвести в квадрат и куб каждое число в заданном списке целых чисел с помощью лямбда-функции.\n",
    "б) Умножьте каждое число заданного списка на заданное число, при это используйте лямбда-функцию.\n",
    "в) Используйте лямбда-функцию для извлечения  n -го элемента кортежа из заданного списка кортежей. Пример: дан список кортежей [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], при n = 0 → ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'], при n = 2 → [99, 96, 94, 98]."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9941afc9",
   "metadata": {},
   "source": [
    "а) Пример кода для возведения в квадрат и куб каждого числа в заданном списке целых чисел с помощью лямбда-функции:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "404b4239",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Квадраты чисел: [1, 4, 9, 16, 25]\n",
      "Кубы чисел: [1, 8, 27, 64, 125]\n"
     ]
    }
   ],
   "source": [
    "#список numbers,\n",
    "numbers = [1, 2, 3, 4, 5]\n",
    "\n",
    "#Лямбда-выражение lambda x: x**2 используется для каждого элемента x \n",
    "#в списке numbers, чтобы возвести его в квадрат и создать новый список squared_numbers.\n",
    "squared_numbers = list(map(lambda x: x**2, numbers))\n",
    "#лямбда-выражение lambda x: x**3 используется для каждого элемента x \n",
    "#в списке numbers, чтобы возвести его в куб и создать новый список cubed_numbers.\n",
    "cubed_numbers = list(map(lambda x: x**3, numbers))\n",
    "\n",
    "print(\"Квадраты чисел:\", squared_numbers)\n",
    "print(\"Кубы чисел:\", cubed_numbers)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f92dba69",
   "metadata": {},
   "source": [
    "б) Пример кода для умножения каждого числа заданного списка на заданное число с использованием лямбда-функции:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1b7b1bf6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10, 20, 30, 40, 50]\n"
     ]
    }
   ],
   "source": [
    "numbers = [1, 2, 3, 4, 5]\n",
    "multiplier = 10\n",
    "#map() применяется к каждому элементу в списке \n",
    "result = list(map(lambda x: x * multiplier, numbers))\n",
    "\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96c2c4cd",
   "metadata": {},
   "source": [
    "в) Пример кода для извлечения n-го элемента кортежа из заданного списка кортежей с использованием лямбда-функции:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ff94f4ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n"
     ]
    }
   ],
   "source": [
    "#создает список data, состоящий из кортежей, где каждый кортеж содержит имя человека \n",
    "#и две оценки (три элемента в каждом кортеже). Затем переменная n устанавливается равной 0.\n",
    "data = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\n",
    "n = 0\n",
    "#Затем функция map() используется с лямбда-выражением для выбора элемента с индексом n из каждого кортежа в списке data\n",
    "result = list(map(lambda x: x[n], data))\n",
    "\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7faac06e",
   "metadata": {},
   "source": [
    "29\n",
    "а) С использованием функции map() создайте список, содержащий заданные числа, возведенные в соответствующую степень. Пример: bases = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], exponents = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] → result = [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000].\n",
    "б) Сгенерировать список целых чисел. С помощью функции filter() выбрать из списка все числа больше 10 и упорядочить их по возрастанию. Используя функцию reduce(), найти их сумму."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f371383",
   "metadata": {},
   "source": [
    "а) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b6785321",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n"
     ]
    }
   ],
   "source": [
    "# два списка bases и exponents, содержащие основания и показатели степеней\n",
    "bases = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n",
    "exponents = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "# Внутри map() используется лямбда-функция lambda x, y: x**y, \n",
    "# которая принимает два аргумента x и y - элементы из bases и exponents - и возводит основание в степень.\n",
    "result = list(map(lambda x, y: x**y, bases, exponents))\n",
    "\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4270b9fb",
   "metadata": {},
   "source": [
    " б) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "39131d14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72]\n",
      "Сумма чисел больше 10: 462\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Генерирование списка целых чисел\n",
    "numbers = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72]\n",
    "\n",
    "# Фильтрация чисел больше 10 и упорядочивание по возрастанию\n",
    "#  Функция filter() применяется к списку numbers с использованием лямбда-функции lambda x: x > 10. \n",
    "# Она оставляет только те числа, которые больше 10, и сохраняет результат в новом списке filtered_numbers\n",
    "\n",
    "filtered_numbers = list(filter(lambda x: x > 10, numbers))\n",
    "\n",
    "# Функция sorted() используется для сортировки чисел из filtered_numbers в порядке возрастания. \n",
    "# Отсортированные числа сохраняются в списке sorted_numbers.\n",
    "\n",
    "sorted_numbers = sorted(filtered_numbers)\n",
    "\n",
    "#  Функция reduce() применяется к отсортированным числам из sorted_numbers с использованием лямбда-функции lambda x, y: x + y. \n",
    "# Она находит сумму всех чисел в списке\n",
    "sum_of_numbers = reduce(lambda x, y: x + y, sorted_numbers, 0)\n",
    "\n",
    "print(sorted_numbers)\n",
    "print(\"Сумма чисел больше 10:\", sum_of_numbers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24114400",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
